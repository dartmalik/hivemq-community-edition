syntax = "proto3";

package com.hivemq.cluster.rpc;

option java_multiple_files = true;

message MqttUserPropertyModel {
    string name = 1;
    string value = 2;
}

message MqttUserPropertiesModel {
    repeated MqttUserPropertyModel userProperties = 1;
}

message PublishModel {
    string hivemqId                         = 1;
    string topic                            = 2;
    bytes payload                           = 3;
    int32 qos                               = 4;
    bool isRetain                           = 5;
    int64 messageExpiryInterval             = 6;
    int32 payloadFormatIndicator            = 7;
    string contentType                      = 8;
    string responseTopic                    = 9;
    bytes correlationData                   = 10;
    MqttUserPropertiesModel userProperties  = 11;
    int32 packetId                          = 12;
    bool isDup                              = 13;
    bool isNewTopicAlias                    = 14;
    repeated int32 subscriptionIdentifiers  = 15;
    int64 timestamp                         = 16;
    int64 publishId                         = 17;
}

message DummyMessageWithIdModel {
    int32 packetId = 1;
    int32 type = 2;
    int32 encodedLength = 3;
    int32 remainingLength = 4;
    int32 propertyLength = 5;
    int32 omittedProperties = 6;
}

message MessageWithIdModel {
    oneof payload {
        PublishModel publish          = 1;
        DummyMessageWithIdModel dummy = 2;
    }
}

message AddMessageRequest {
    string queueId                  = 1;
    bool shared                     = 2;
    repeated PublishModel published = 3;
    bool retained                   = 4;
    int64 queueLimit                = 5;
}

message AddMessageResponse {
    int32 size = 1;
}

message ReadNewRequest {
    string queueId           = 1;
    bool shared              = 2;
    repeated int32 packetIds = 3;
    int64 byteLimit          = 4;
}

message ReadNewResponse {
    repeated PublishModel publishes = 1;
}

message ReadInflightRequest {
    string client      = 1;
    int64 byteLimit    = 2;
    int32 messageLimit = 3;
}

message ReadInflightResponse {
    repeated MessageWithIdModel messages = 1;
}

message RemoveRequest {
    string clientId = 1;
    int32 packetId  = 2;
}

message RemoveResponse {}

message PutPubrelRequest {
    string clientId = 1;
    int32 packetId = 2;
}

message PutPubrelResponse {}

message ClearRequest {
    string queueId = 1;
    bool shared    = 2;
}

message ClearResponse {}

message SizeRequest {
    string queueId = 1;
    bool shared = 2;
}

message SizeResponse {
    int32 size = 1;
}

message RemoveAllQos0MessagesRequest {
    string queueId = 1;
    bool shared    = 2;
}

message RemoveAllQos0MessagesResponse {}

message PublishAvailableRequest {
    string clientId = 1;
}

message PublishAvailableResponse {}

service QueuePersistenceService {
    rpc add(AddMessageRequest) returns (AddMessageResponse);
    rpc readNew(ReadNewRequest) returns (ReadNewResponse);
    rpc readInflight(ReadInflightRequest) returns (ReadInflightResponse);
    rpc remove(RemoveRequest) returns (RemoveResponse);
    rpc putPubrel(PutPubrelRequest) returns (PutPubrelResponse);
    rpc clear(ClearRequest) returns (ClearResponse);
    rpc size(SizeRequest) returns (SizeResponse);
    rpc removeAllQos0Messages(RemoveAllQos0MessagesRequest) returns (RemoveAllQos0MessagesResponse);
    rpc publishAvailable(PublishAvailableRequest) returns (PublishAvailableResponse);
}